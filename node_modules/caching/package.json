{
  "_args": [
    [
      {
        "hosted": {
          "directUrl": "https://raw.githubusercontent.com/faradayio/node-caching/master/package.json",
          "gitUrl": "git://github.com/faradayio/node-caching.git",
          "httpsUrl": "git+https://github.com/faradayio/node-caching.git",
          "shortcut": "github:faradayio/node-caching",
          "ssh": "git@github.com:faradayio/node-caching.git",
          "sshUrl": "git+ssh://git@github.com/faradayio/node-caching.git",
          "type": "github"
        },
        "name": "caching",
        "raw": "caching@git://github.com/faradayio/node-caching.git",
        "rawSpec": "git://github.com/faradayio/node-caching.git",
        "scope": null,
        "spec": "git://github.com/faradayio/node-caching.git",
        "type": "hosted"
      },
      "/Users/buckca/Desktop/vectortileserver"
    ]
  ],
  "_from": "git://github.com/faradayio/node-caching.git",
  "_id": "caching@0.1.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/caching",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/faradayio/node-caching/master/package.json",
      "gitUrl": "git://github.com/faradayio/node-caching.git",
      "httpsUrl": "git+https://github.com/faradayio/node-caching.git",
      "shortcut": "github:faradayio/node-caching",
      "ssh": "git@github.com:faradayio/node-caching.git",
      "sshUrl": "git+ssh://git@github.com/faradayio/node-caching.git",
      "type": "github"
    },
    "name": "caching",
    "raw": "caching@git://github.com/faradayio/node-caching.git",
    "rawSpec": "git://github.com/faradayio/node-caching.git",
    "scope": null,
    "spec": "git://github.com/faradayio/node-caching.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/faradayio/node-caching.git#8a06c6f7654c9ba5cfac29037fc404e8ca1a5623",
  "_shasum": "816f7bd2acefbb627e96ac75f29598773104d090",
  "_shrinkwrap": null,
  "_spec": "caching@git://github.com/faradayio/node-caching.git",
  "_where": "/Users/buckca/Desktop/vectortileserver",
  "author": {
    "email": "mape@mape.me",
    "name": "Mathias Pettersson"
  },
  "bugs": {
    "url": "https://github.com/mape/node-caching/issues"
  },
  "dependencies": {
    "redis": ">=0.6.7"
  },
  "description": "Easier caching in node.js",
  "devDependencies": {
    "expresso": "~0.8.1"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": [
    "node"
  ],
  "gitHead": "8a06c6f7654c9ba5cfac29037fc404e8ca1a5623",
  "homepage": "https://github.com/mape/node-caching#readme",
  "main": "./lib/caching",
  "name": "caching",
  "optionalDependencies": {},
  "readme": "# node-caching\n\nMakes working with caching easier.\n\n## Installation\n\nVia [npm](http://github.com/isaacs/npm):\n\n    $ npm install caching\n\n## Pseudo code example\n    var Caching = require('caching');\n    var cache = new Caching('redis'); /* use 'memory' or 'redis' */\n\n    var ttl = 60 * 1000; // 1minute;\n    cache('twitter-users', ttl, function(passalong) {\n    \tgetMostActiveTwitterUser(function(err, userName) {\n    \t\tfetchTwitterFollowers(userName, passalong); // passalong replaces function(err, userList) {}\n    \t})\n    }, function(err, userList) {\n    \tconsole.log(userList);\n    });\n\n## Code example\n    var Caching = require('caching');\n    var cache = new Caching('redis'); /* use 'memory' or 'redis' */\n    \n    setInterval(function() {\n    \tcache('key', 10000 /*ttl in ms*/, function(passalong) {\n    \t\t// This will only run once, all following requests will use cached data.\n    \t\tsetTimeout(function() {\n    \t\t\tpassalong(null, 'Cached result');\n    \t\t}, 1000);\n    \t}, function(err, results) {\n    \t\t// This callback will be reused each call\n    \t\tconsole.log(results);\n    \t});\n    }, 100);\n\n\n## Built in stores\n* Memory\n* Redis\n\n## Api\n\n    cache(key, ttl, runIfNothingInCache, useReturnedCachedResults);\n\n### arguments[0]\nKey, `'myKey'`\n### arguments[1]\nTime To Live in ms, `60*30*1000`\n### arguments[2]\nCallback that will run if results aren't already in cache store.\n\n    function(passalong) {\n    \tsetTimeout(function() {\n\t\t\tpassalong(null, 'mape', 'frontend developer', 'sweden');\n    \t}, 1000);\n    }\n\n### arguments[3]\nCallback that is called every time the method runs.\n\n    function(err, name, position, location) {\n    \tconsole.log(name, position, location);\n    }\n",
  "readmeFilename": "README.md",
  "repositories": [
    {
      "type": "git",
      "url": "git+ssh://git@github.com/mape/node-caching.git"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/mape/node-caching.git"
  },
  "scripts": {
    "test": "expresso"
  },
  "version": "0.1.4"
}
